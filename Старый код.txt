package com.example.projectgl

import android.content.Context
import android.opengl.GLES20
import android.opengl.GLES20.glGetAttribLocation
import android.opengl.GLES20.glGetUniformLocation
import android.opengl.GLES20.glUseProgram
import android.opengl.GLSurfaceView
import android.opengl.Matrix
import android.os.SystemClock
import com.example.projectgl.ShaderUtils.createProgram
import com.example.projectgl.ShaderUtils.createShader
import com.example.projectgl.TextureUtils.loadTextureCube
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.nio.FloatBuffer
import javax.microedition.khronos.egl.EGLConfig
import javax.microedition.khronos.opengles.GL10
import kotlin.math.cos
import kotlin.math.sin


class OpenGLRenderer(private val context: Context) : GLSurfaceView.Renderer {
    private var POSITION_COUNT = 3
    private var COLOR_COUNT = 3
    private var TEXTURE_COUNT = 2

    private var programId = 0
    private lateinit var vertexData: FloatBuffer
    private lateinit var indexArray: ByteBuffer

    private var aColorLocation = 0
    private var aPositionLocation = 0
    private var aTextureLocation = 0
    private var uTextureUnitLocation = 0
    private var uMatrixLocation = 0

    private val mProjectionMatrix = FloatArray(16)
    private val mViewMatrix = FloatArray(16)
    private val mModelMatrix = FloatArray(16)
    private val mMatrix = FloatArray(16)

    private val TIME: Long = 10000
    private var rotateVect = arrayOf(0f, 1f, 1f)

    private var texture = 0
    private var texture1 = 0

    override fun onSurfaceCreated(arg0: GL10, arg1: EGLConfig) {
        GLES20.glEnable(GLES20.GL_DEPTH_TEST);
        GLES20.glClearColor(0f, 0f, 0f, 1f)

        createAndUseProgram()
        getLocations()
        prepareData()
        bindData()
        createViewMatrix()
    }
    private fun createAndUseProgram() {
        val vertexShaderId = createShader(context, GLES20.GL_VERTEX_SHADER, R.raw.vertex_shader)
        val fragmentShaderId = createShader(context, GLES20.GL_FRAGMENT_SHADER, R.raw.fragment_shader)
        programId = createProgram(vertexShaderId, fragmentShaderId)
        glUseProgram(programId)
    }

    override fun onSurfaceChanged(arg0: GL10, width: Int, height: Int) {
        GLES20.glViewport(0, 0, width, height)
        createProjectionMatrix(width, height);
        bindMatrix();
    }

    private fun prepareData() {
        //z от -1 до -8
        // при orthoM -1 не работает
        POSITION_COUNT = 3
        COLOR_COUNT = 3
        TEXTURE_COUNT = 2
        val vertices = floatArrayOf(
//            // ось X
//            -l, 0f, 0f, 1f, 0f, 0f, 0f, 0f,
//            l, 0f, 0f, 1f, 0f, 0f, 0f, 0f,
//
//            // ось Y
//            0f, -l, 0f, 0f, 1f, 0f, 0f, 0f,
//            0f, l, 0f, 0f, 1f, 0f, 0f, 0f,
//
//            // ось Z
//            0f, 0f, -l, 0f, 0f, 1f, 0f, 0f,
//            0f, 0f, l, 0f, 0f, 1f, 0f, 0f,

//            -1f,  1f, 1f, 1f, 1f, 1f,  0f, 0f,
//            -1f, -1f, 1f, 1f, 1f, 1f,  0f, 1f,
//            1f,  1f, 1f, 1f, 1f, 1f,  1f, 0f,
//            1f, -1f, 1f, 1f, 1f, 1f,  1f, 1f,
            // вершины куба
            -1f,  1f,  1f,     // верхняя левая ближняя
            1f,  1f,  1f,     // верхняя правая ближняя
            -1f, -1f,  1f,     // нижняя левая ближняя
            1f, -1f,  1f,     // нижняя правая ближняя
            -1f,  1f, -1f,     // верхняя левая дальняя
            1f,  1f, -1f,     // верхняя правая дальняя
            -1f, -1f, -1f,     // нижняя левая дальняя
            1f, -1f, -1f      // нижняя правая дальняя

        )
        vertexData = ByteBuffer.allocateDirect(vertices.size * 4)
            .order(ByteOrder.nativeOrder()).asFloatBuffer()
        vertexData.put(vertices)
        indexArray = ByteBuffer.allocateDirect(36)
            .put(
                byteArrayOf( // грани куба
                    // ближняя
                    1, 3, 0,
                    0, 3, 2,  // дальняя
                    4, 6, 5,
                    5, 6, 7,  // левая
                    0, 2, 4,
                    4, 2, 6,  // правая
                    5, 7, 1,
                    1, 7, 3,  // верхняя
                    5, 1, 4,
                    4, 1, 0,  // нижняя
                    6, 2, 7,
                    7, 2, 3
                )
            )
        indexArray.position(0)

        texture = loadTextureCube(
            context, intArrayOf(
                R.drawable.box0, R.drawable.box1,
                R.drawable.box2, R.drawable.box3,
                R.drawable.box4, R.drawable.box5
            )
        )
//        texture = TextureUtils.loadTexture(context, R.drawable.box);
//        texture1 = TextureUtils.loadTexture(context, R.drawable.white);
    }

    private fun createProjectionMatrix(width: Int, height: Int) {
        var ratio = 1f
        var left = -1f
        var right = 1f
        var bottom = -1f
        var top = 1f
        val near = 2f
        val far = 8f
        if (width > height) {
            ratio = width.toFloat() / height
            left *= ratio
            right *= ratio
        } else {
            ratio = height.toFloat() / width
            bottom *= ratio
            top *= ratio
        }
        Matrix.frustumM(mProjectionMatrix, 0, left, right, bottom, top, near, far)
    }

    private fun createViewMatrix() {
        val time = (SystemClock.uptimeMillis() % TIME).toFloat() / TIME
        val angle: Double = time * 2 * 3.1415926

        // точка положения камеры
        val eyeX = (cos(angle) * 4f).toFloat();
        val eyeY = 2f //(cos(angle) * 3f).toFloat();
        val eyeZ = (sin(angle) * 4f).toFloat();

        // точка направления камеры
        val centerX = 0f
        val centerY = 0f
        val centerZ = 0f

        // up-вектор
        val vX = 0f
        val vY = 1f
        val vZ = 0f
        Matrix.setLookAtM(mViewMatrix, 0, eyeX, eyeY, eyeZ, centerX, centerY, centerZ, vX, vY, vZ)
    }

    private fun bindMatrix() {
        Matrix.multiplyMM(mMatrix, 0, mViewMatrix, 0, mModelMatrix, 0);
        Matrix.multiplyMM(mMatrix, 0, mProjectionMatrix, 0, mMatrix, 0);
        GLES20.glUniformMatrix4fv(uMatrixLocation, 1, false, mMatrix, 0)
    }

    private fun getLocations() {
        aPositionLocation = glGetAttribLocation(programId, "a_Position")
        //aColorLocation = glGetAttribLocation(programId, "a_Color");
        //aTextureLocation = glGetAttribLocation(programId, "a_Texture")
        uTextureUnitLocation = glGetUniformLocation(programId, "u_TextureUnit")
        uMatrixLocation = glGetUniformLocation(programId, "u_Matrix")
    }
    private fun bindData() {
        // координаты
        vertexData.position(0);
        GLES20.glVertexAttribPointer(
            aPositionLocation,
            POSITION_COUNT,
            GLES20.GL_FLOAT,
            false,
            0,
            vertexData
        );
        GLES20.glEnableVertexAttribArray(aPositionLocation);

//        // цвет
//        vertexData.position(3);
//        GLES20.glVertexAttribPointer(
//            aColorLocation,
//            COLOR_COUNT,
//            GLES20.GL_FLOAT,
//            false,
//            32,
//            vertexData
//        );
//        GLES20.glEnableVertexAttribArray(aColorLocation);

//        // координаты текстур
//        vertexData.position(6);
//        GLES20.glVertexAttribPointer(aTextureLocation, TEXTURE_COUNT, GLES20.GL_FLOAT,
//            false, 32, vertexData);
//        GLES20.glEnableVertexAttribArray(aTextureLocation);

        // помещаем текстуру в target CUBE_MAP юнита 0
        GLES20.glActiveTexture(GLES20.GL_TEXTURE0);
        GLES20.glBindTexture(GLES20.GL_TEXTURE_CUBE_MAP, texture);

        // помещаем текстуру в target 2D юнита 0
        //GLES20.glActiveTexture(GLES20.GL_TEXTURE0);


        // юнит текстуры
        GLES20.glUniform1i(uTextureUnitLocation, 0);
    }
//    Этот пятый параметр называется stride. В него необходимо поместить кол-во байт,
//    которое занимают в нашем массиве данные по каждой вершине.
//    У нас для каждой вершины заданы 5 float значений:
//    2 координаты (XY) и три компонента цвета (RGB).
//    5 float значений – это 5 * 4 байта = 20 байтов.
//    Именно это значение мы и передаем в stride.
//    Получается примерно такая схема:
//
//    1) позиция в массиве vertexData ставится в 0, т.е. на первый элемент
//    2) система берет size = 2 float значения (т.е. координаты вершины) из vertexData
//    и передает их в aPositionLocation (что соответствует атрибуту a_Position в вершинном шейдере)
//    3) позиция перемещается на 20 байтов, т.е. к координатам следующей вершины.

    override fun onDrawFrame(arg0: GL10) {
        GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT or GLES20.GL_DEPTH_BUFFER_BIT)
        Matrix.setIdentityM(mModelMatrix, 0);
        createViewMatrix();
        bindMatrix();
//        GLES20.glLineWidth(10f)
//        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, texture1);
//        GLES20.glDrawArrays(GLES20.GL_LINES, 0, 2)
//        GLES20.glDrawArrays(GLES20.GL_LINES, 2, 2)
//        GLES20.glDrawArrays(GLES20.GL_LINES, 4, 2)
//
//        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, texture);
//        GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP, 6, 4);
        GLES20.glDrawElements(GLES20.GL_TRIANGLES, 36, GLES20.GL_UNSIGNED_BYTE, indexArray);

    }

    private fun setModelMatrix() {
        val angle = (SystemClock.uptimeMillis() % TIME).toFloat() / TIME * 360
        Matrix.rotateM(mModelMatrix, 0, angle, rotateVect[0], rotateVect[1], rotateVect[2])
    }
}